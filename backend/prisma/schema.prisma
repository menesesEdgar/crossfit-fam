generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String      @unique
  phone     String?
  password  String
  status    Boolean?
  roleId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  enabled   Boolean     @default(true)
  // photo     UserImage[] @relation("UserImages")
  role      Role        @relation(fields: [roleId], references: [id])

  image Image[] @relation("UserImage")
  Score Score[]
}
// admin, competitor
model Role {
  id         Int             @id @default(autoincrement())
  name       String
  users      User[]
}

model Exercise {
  id         Int             @id @default(autoincrement())
  name       String
}
// Intermedio varonil, avanzado Femenil
model Category {
    id         Int             @id @default(autoincrement())
    name       String
    division   String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    score Score[]
}
// Competencia (Pacific Games)
model Contest {
  id         Int             @id @default(autoincrement())
  name       String
  location   String
  organizer  String
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  wod Wod[]
  image Image[] @relation("ContestImage")
}
// Score1, Score2 (Cada Score es un WOD  (cada WOD es una serie de ejercicios))
model Wod {
  id         Int             @id @default(autoincrement())
  name       String
  contestId  Int
  contest    Contest @relation(fields: [contestId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@index([contestId], map: "Score_contestId_fkey")
  score Score []
}
// Edgar M, Pacific Games, Score1 (WOD Jumper), 170 puntos o 6min
model Score {
  id         Int             @id @default(autoincrement())
  userId     Int
  wodId      Int
  score      String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  user       User @relation(fields: [userId], references: [id])
  wod       Wod @relation(fields: [wodId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@index([categoryId], map: "Score_categoryId_fkey")
  @@index([userId], map: "Score_userId_fkey")
  @@index([wodId], map: "Score_wodId_fkey")
}
model Image {
  id        String   @id @default(uuid())
  url       String
  thumbnail String?
  type      String
  metadata  Json?
  enabled   Boolean   @default(true)
  createdAt DateTime @default(now())
  userId    Int?
  user      User?    @relation("UserImage", fields: [userId], references: [id])
  contestId Int?
  contest   Contest?    @relation("ContestImage", fields: [contestId], references: [id])
  @@index([userId])
  @@index([contestId])

}