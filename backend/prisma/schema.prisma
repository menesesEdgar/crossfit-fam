generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  firstName String
  lastName  String
  email     String      @unique
  phone     String?
  age       Int?
  gender    String?
  password  String
  status    Boolean?   @default(true)
  roleId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  enabled   Boolean     @default(true)
  // photo     UserImage[] @relation("UserImages")
  role      Role        @relation(fields: [roleId], references: [id])

  photo Image[] @relation("UserImage")
  contestCategoryAthlete ContestCategoryAthlete[]
}
// create category, update category, create user, etc.
model Permission {
  id          Int    @id @default(autoincrement())
  name        String
  description String?
  roles       RolePermission[]
}
// user -permission
model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

// admin, competitor
model Role {
  id         Int             @id @default(autoincrement())
  name       String
  users      User[]
  permissions RolePermission[]
}

// Intermedio varonil, avanzado Femenil
model Category {
    id         Int             @id @default(autoincrement())
    name       String
    division   String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    contestCategory ContestCategory[]
}
// Competencia (Pacific Games)
model Contest {
  id         Int             @id @default(autoincrement())
  name       String
  location   String
  organizer  String // Pendiente de relacionar con un usuario
  startDate  DateTime
  endDate    DateTime?
  status     String // Abierta, En proceso, cerrada
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  contestWod ContestWod[]
  contestCategory ContestCategory[]
  image Image[] @relation("ContestImage")
}
// A una competencia se le pueden asignar diferentes categorias
model ContestCategory {
  id         Int             @id @default(autoincrement())
  contestId Int
  contest  Contest @relation(fields: [contestId], references: [id])
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
  @@index([contestId], map: "ContestCategory_contestId_fkey")
  @@index([categoryId], map: "ContestCategory_categoryId_fkey")
  conCateConWod ConCateConWod []
  contestCategoryAthlete ContestCategoryAthlete[]
}
// Score1, Score2 (Cada Score es un WOD  (cada WOD es una serie de ejercicios))
model Wod {
  id         Int             @id @default(autoincrement())
  name       String
  description String? // Wod details
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  contestWod ContestWod[]
}
// A una competencia se le pueden asignar diferentes WODS
model ContestWod {
  id         Int             @id @default(autoincrement())
  contestId Int
  contest  Contest @relation(fields: [contestId], references: [id])
  wodId  Int
  wod    Wod @relation(fields: [wodId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@index([wodId], map: "ContestWod_wodId_fkey")
  @@index([contestId], map: "ContestWod_contestIdId_fkey")
  conCateConWod ConCateConWod[]

}
// A una categoria de la competencia, se le pueden asignar diferentes wods de la competencia 
model ConCateConWod {
  id                Int             @id @default(autoincrement())
  contestCategoryId Int
  contestCategory   ContestCategory @relation(fields: [contestCategoryId], references: [id])
  contestWodId      Int
  contestWod        ContestWod @relation(fields: [contestWodId], references: [id])
  @@index([contestWodId], map: "ConCateConWod_contestWodId_fkey")
  @@index([contestCategoryId], map: "ConCateConWod_contestCategoryId_fkey")
  score Score[]
}

model ContestCategoryAthlete {
  id         Int             @id @default(autoincrement())
  userId     String
  user       User @relation(fields: [userId], references: [id])
  contestCategoryId Int
  contestCategory ContestCategory @relation(fields: [contestCategoryId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@index([userId], map: "ContestAthletes_userId_fkey")
  @@index([contestCategoryId], map: "ContestAthletes_contestCategoryId_fkey")
  score Score []
}
// Edgar M, Pacific Games, Score1 (WOD Jumper), 170 puntos o 6min
model Score {
  id         Int             @id @default(autoincrement())
  contestCategoryAthleteId     Int
  contestCategoryAthlete       ContestCategoryAthlete @relation(fields: [contestCategoryAthleteId], references: [id])
  score      String
  measure    String         // reps or time
  contestCategoryWodId Int // It's a WOD for an specific category
  contestCategoryWod       ConCateConWod @relation(fields: [contestCategoryWodId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@index([contestCategoryWodId], map: "Score_contestCategoryWodId_fkey")
  @@index([contestCategoryAthleteId], map: "Score_contestCategoryAthleteId_fkey")
}
model Image {
  id        String   @id @default(uuid())
  url       String
  thumbnail String?
  type      String
  metadata  Json?
  enabled   Boolean   @default(true)
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation("UserImage", fields: [userId], references: [id])
  contestId Int?
  contest   Contest?    @relation("ContestImage", fields: [contestId], references: [id])
  @@index([userId])
  @@index([contestId])

}